name: Android Debug Build
  
on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Vérification de la structure du projet
        run: |
          echo "Vérification de la structure du projet..."
          if [ ! -d "android" ]; then
            echo "Le répertoire 'android' est manquant. Assurez-vous que c'est un projet Android ou React Native."
            exit 1
          fi
          if [ ! -f "package.json" ]; then
            echo "Le fichier 'package.json' est manquant. Assurez-vous que c'est un projet React Native."
            exit 1
          fi
          if [ ! -f "android/build.gradle" ]; then
            echo "Le fichier 'android/build.gradle' est manquant."
            exit 1
          fi
          echo "Structure du projet validée."

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install npm dependencies
        run: |
          npm install --legacy-peer-deps
          npm install @react-native-community/cli@latest @react-native-community/cli-platform-android@latest --legacy-peer-deps --save-dev

      - name: Verify React Native CLI installation
        run: |
          echo "Checking React Native CLI packages..."
          ls -la node_modules/@react-native-community/cli-platform-android/
          echo "Node modules content:"
          ls -la node_modules/

      # Rest of your existing steps...
      - name: Install Android SDK (cmdline-tools)
        run: |
          echo "Installation du SDK Android..."
          mkdir -p android-sdk/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O sdk.zip
          unzip sdk.zip -d tmp-sdk
          mv tmp-sdk/cmdline-tools android-sdk/cmdline-tools/latest
          rm -rf tmp-sdk sdk.zip
          echo "ANDROID_HOME=$PWD/android-sdk" >> $GITHUB_ENV
          echo "$PWD/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$PWD/android-sdk/platform-tools" >> $GITHUB_PATH
          echo "ANDROID_SDK_ROOT=$PWD/android-sdk" >> $GITHUB_ENV

      - name: Accepter les licences SDK et installer les composants nécessaires
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"
          sdkmanager --update

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Build Debug APK
        run: ./gradlew assembleDebug -Dorg.gradle.jvmargs="-Xmx4096m -XX:MaxMetaspaceSize=1024m" --no-daemon
        working-directory: android

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: android/app/build/outputs/apk/debug/*.apk
          retention-days: 7
